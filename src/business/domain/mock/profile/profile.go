// Code generated by MockGen. DO NOT EDIT.
// Source: profile/profile.go
//
// Generated by this command:
//
//	mockgen -source=profile/profile.go -destination=mock/profile/profile.go
//
// Package mock_profile is a generated GoMock package.
package mock_profile

import (
	context "context"
	entity "loverly/src/business/entity"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockInterface is a mock of Interface interface.
type MockInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceMockRecorder
}

// MockInterfaceMockRecorder is the mock recorder for MockInterface.
type MockInterfaceMockRecorder struct {
	mock *MockInterface
}

// NewMockInterface creates a new mock instance.
func NewMockInterface(ctrl *gomock.Controller) *MockInterface {
	mock := &MockInterface{ctrl: ctrl}
	mock.recorder = &MockInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInterface) EXPECT() *MockInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockInterface) Create(ctx context.Context, param entity.Profile) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, param)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockInterfaceMockRecorder) Create(ctx, param any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockInterface)(nil).Create), ctx, param)
}

// GetBySwipe mocks base method.
func (m *MockInterface) GetBySwipe(ctx context.Context, userId int64, gender string) ([]entity.Profile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBySwipe", ctx, userId, gender)
	ret0, _ := ret[0].([]entity.Profile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBySwipe indicates an expected call of GetBySwipe.
func (mr *MockInterfaceMockRecorder) GetBySwipe(ctx, userId, gender any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBySwipe", reflect.TypeOf((*MockInterface)(nil).GetBySwipe), ctx, userId, gender)
}

// GetByUserId mocks base method.
func (m *MockInterface) GetByUserId(ctx context.Context, userId int64) (entity.Profile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUserId", ctx, userId)
	ret0, _ := ret[0].(entity.Profile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUserId indicates an expected call of GetByUserId.
func (mr *MockInterfaceMockRecorder) GetByUserId(ctx, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUserId", reflect.TypeOf((*MockInterface)(nil).GetByUserId), ctx, userId)
}

// GetByUserIds mocks base method.
func (m *MockInterface) GetByUserIds(ctx context.Context, userId []string) ([]entity.Profile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUserIds", ctx, userId)
	ret0, _ := ret[0].([]entity.Profile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUserIds indicates an expected call of GetByUserIds.
func (mr *MockInterfaceMockRecorder) GetByUserIds(ctx, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUserIds", reflect.TypeOf((*MockInterface)(nil).GetByUserIds), ctx, userId)
}
