// Code generated by MockGen. DO NOT EDIT.
// Source: swipe/swipe.go
//
// Generated by this command:
//
//	mockgen -source=swipe/swipe.go -destination=mock/swipe/swipe.go
//
// Package mock_swipe is a generated GoMock package.
package mock_swipe

import (
	context "context"
	entity "loverly/src/business/entity"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockInterface is a mock of Interface interface.
type MockInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceMockRecorder
}

// MockInterfaceMockRecorder is the mock recorder for MockInterface.
type MockInterfaceMockRecorder struct {
	mock *MockInterface
}

// NewMockInterface creates a new mock instance.
func NewMockInterface(ctrl *gomock.Controller) *MockInterface {
	mock := &MockInterface{ctrl: ctrl}
	mock.recorder = &MockInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInterface) EXPECT() *MockInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockInterface) Create(ctx context.Context, param entity.Swipe) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, param)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockInterfaceMockRecorder) Create(ctx, param any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockInterface)(nil).Create), ctx, param)
}

// GetBySwipeId mocks base method.
func (m *MockInterface) GetBySwipeId(ctx context.Context, swiperId, swipedId int64) (entity.Swipe, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBySwipeId", ctx, swiperId, swipedId)
	ret0, _ := ret[0].(entity.Swipe)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBySwipeId indicates an expected call of GetBySwipeId.
func (mr *MockInterfaceMockRecorder) GetBySwipeId(ctx, swiperId, swipedId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBySwipeId", reflect.TypeOf((*MockInterface)(nil).GetBySwipeId), ctx, swiperId, swipedId)
}

// GetBySwiperId mocks base method.
func (m *MockInterface) GetBySwiperId(ctx context.Context, swiperId int64) ([]entity.Swipe, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBySwiperId", ctx, swiperId)
	ret0, _ := ret[0].([]entity.Swipe)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBySwiperId indicates an expected call of GetBySwiperId.
func (mr *MockInterfaceMockRecorder) GetBySwiperId(ctx, swiperId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBySwiperId", reflect.TypeOf((*MockInterface)(nil).GetBySwiperId), ctx, swiperId)
}
